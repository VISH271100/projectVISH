Для выполнения этих запросов необходимо знать структуру базы данных, поскольку каждый запрос будет иметь свой собственный синтаксис и структуру. 
Однако, предположим, что у нас есть таблица `employees` с полями `id`, `name`, `salary`, `department`, и `manager_id`.

1. Для вывода сотрудника с максимальной заработной платой используется запрос:
SELECT * FROM employees ORDER BY salary DESC LIMIT 1;
Этот запрос отсортирует все записи в таблице по убыванию зарплаты и вернет первую запись.

2. Для вычисления максимальной длины цепочки руководителей необходимо выполнить запрос, используя рекурсивную функцию и рекурсивное общие таблицы выражения (CTE). 
Вот как выглядеть SQL-запрос для нашей таблицы:
WITH RECURSIVE cte AS (
SELECT id, name, manager_id, 1 AS depth FROM employees WHERE manager_id IS NULL
UNION ALL
SELECT e.id, e.name, e.manager_id, cte.depth + 1 FROM employees e
INNER JOIN cte ON e.manager_id = cte.id
)
SELECT MAX(depth) FROM cte;
В этом запросе мы создаем рекурсивное CTE, который начинает с руководителей уровня 1 (тех, у кого нет руководителей). 
Затем мы рекурсивно объединяем эту таблицу с сотрудниками, у которых есть менеджеры. 
Каждый новый уровень увеличивает значение depth на 1. Наконец, мы выбираем максимальную глубину.

3. Чтобы найти отдел с максимальной суммарной зарплатой, мы используем запрос:
SELECT department, SUM(salary) as total_salary FROM employees GROUP BY department ORDER BY total_salary DESC LIMIT 1;

Этот запрос сначала суммирует зарплаты всех сотрудников по каждому отделу, сгруппирует их, затем отсортирует по убыванию и вернет первый результат.

4. Чтобы вывести сотрудника, чье имя начинается на «Р» и заканчивается на «н», мы используем запрос:
SELECT * FROM employees WHERE name LIKE 'Р%н';
В этом запросе мы используем оператор LIKE, чтобы найти все записи, в которых имя начинается на «Р» и заканчивается на «н».